pipeline {
    agent any

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                sh 'docker build -t my-website -f Dockerfile .'
            }
        }
        stage('Test') {
            steps {
                sh 'docker run --rm -d -p 8090:80 my-website'
                sleep time: 10, unit: 'SECONDS'
                sh 'curl http://localhost:8090'
                sh 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8090'
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh 'docker compose version'
                    def result = sh(script: 'docker-compose up -d --no-color --force-recreate', returnStatus: true)
                    echo "Docker Compose up result: ${result}"

                    if (result != 0) {
                        currentBuild.result = 'FAILURE'
                        error('Deployment failed')
                    }

                    def containerName = sh(script: 'docker-compose ps -q my-app', returnStdout: true).trim()
                    sh "docker logs $containerName"
                    def exitCode = sh(script: "docker inspect --format='{{.State.ExitCode}}' $containerName", returnStdout: true).trim()
                    echo "Container exit code: $exitCode"
                    sh 'docker-compose down --remove-orphans -v'
                }
            }
        }
    }

    post {
        always {
            echo 'Post-build cleanup...'
        }
    }
}
