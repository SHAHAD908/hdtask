pipeline {
    agent any

    stages {
        // Previous stages omitted for brevity
        
        stage('Deploy with Docker Compose') {
            steps {
                script {
                    // Ensure Docker Compose is installed
                    sh 'docker compose version'

                    // Start containers defined in docker-compose.yaml
                    def result = sh(script: 'docker-compose up -d --no-color --force-recreate', returnStatus: true)

                    // Log the result of the command
                    echo "Docker Compose up result: ${result}"

                    if (result != 0) {
                        currentBuild.result = 'FAILURE'
                        error('Deployment failed')
                    }

                    // Get the name of the container
                    def containerName = sh(script: 'docker-compose ps -q my-app', returnStdout: true).trim()

                    // Print logs of the container
                    sh "docker logs $containerName"

                    // Check the exit status of the container
                    def exitCode = sh(script: "docker inspect --format='{{.State.ExitCode}}' $containerName", returnStdout: true).trim()

                    // Print the exit code
                    echo "Container exit code: $exitCode"

                    // Stop and remove containers after deployment
                    sh 'docker-compose down --remove-orphans -v'
                }
            }
        }
    }

    post {
        always {
            // Any cleanup or finalization steps here
            echo 'Post-build cleanup...'
        }
    }
}
